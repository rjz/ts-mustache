// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`"end-to-end" tests handles nested properties 1`] = `
"type MustacheValue = string | number | boolean | (() => MustacheValue)

type MustacheRecord<T> = T

interface Test {
  foo: MustacheRecord<TestFoo>
}

interface TestFoo {
  bar: MustacheValue
}

export type TemplateMap = {
  'test': Test,
}

export type TemplateName = keyof TemplateMap

export const TEMPLATES = [
  'test',
] as const"
`;

exports[`"end-to-end" tests handles nested properties in sections 1`] = `
"type MustacheValue = string | number | boolean | (() => MustacheValue)

type MustacheRecord<T> = T

/**
 *  Placeholder for evaluating a lambda invoked as a Section value.
 *
 *  @see {@link https://github.com/mustache/spec/blob/master/specs/~lambdas.yml}
 */
interface MustacheSectionLambda {
  (): MustacheValue
}

type MustacheSection<T> = T[] | T | MustacheSectionLambda

interface Test {
  foo: MustacheRecord<TestFoo>
}

interface TestFoo {
  bar?: MustacheSection<TestFooBar>
}

interface TestFooBar {
  pleaseDontButOk: MustacheValue
}

export type TemplateMap = {
  'test': Test,
}

export type TemplateName = keyof TemplateMap

export const TEMPLATES = [
  'test',
] as const"
`;

exports[`"end-to-end" tests self references also handles when a self-reference has a sibling property 1`] = `
"type MustacheValue = string | number | boolean | (() => MustacheValue)

/**
 *  Placeholder for evaluating a lambda invoked as a Section value.
 *
 *  @see {@link https://github.com/mustache/spec/blob/master/specs/~lambdas.yml}
 */
interface MustacheSectionLambda {
  (): MustacheValue
}

type MustacheSection<T> = T[] | T | MustacheSectionLambda

interface Test {
  items?: MustacheSection<TestItems>
}

interface TestItems {
  length: MustacheValue
  // self-reference ({{.}}) intentionally left blank
}

export type TemplateMap = {
  'test': Test,
}

export type TemplateName = keyof TemplateMap

export const TEMPLATES = [
  'test',
] as const"
`;

exports[`"end-to-end" tests self references special-cases when an item is _only_ self-referential 1`] = `
"/**
 *  Placeholder for evaluating a lambda invoked as a Section value.
 *
 *  @see {@link https://github.com/mustache/spec/blob/master/specs/~lambdas.yml}
 */
interface MustacheSectionLambda {
  (): MustacheValue
}

type MustacheSection<T> = T[] | T | MustacheSectionLambda

interface Test {
  items?: MustacheSection<TestItems>
}

type TestItems = MustacheValue

export type TemplateMap = {
  'test': Test,
}

export type TemplateName = keyof TemplateMap

export const TEMPLATES = [
  'test',
] as const"
`;

exports[`"end-to-end" tests works 1`] = `
"type MustacheValue = string | number | boolean | (() => MustacheValue)

/**
 *  Placeholder for evaluating a lambda invoked as a Section value.
 *
 *  @see {@link https://github.com/mustache/spec/blob/master/specs/~lambdas.yml}
 */
interface MustacheSectionLambda {
  (): MustacheValue
}

type MustacheSection<T> = T[] | T | MustacheSectionLambda

interface _person {
  name: MustacheValue
  age: MustacheValue
}

interface Nametag {
  person?: MustacheSection<NametagPerson>
  name: MustacheValue
}

interface NametagPerson {
  name: MustacheValue
  age: MustacheValue
}

interface Profile {
  name: MustacheValue
  age: MustacheValue
}

export type TemplateMap = {
  '_person': _person,
  'nametag': Nametag,
  'profile': Profile,
}

export type TemplateName = keyof TemplateMap

export const TEMPLATES = [
  '_person',
  'nametag',
  'profile',
] as const"
`;
